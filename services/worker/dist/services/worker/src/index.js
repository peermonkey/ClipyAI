"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bullmq_1 = require("bullmq");
const ioredis_1 = __importDefault(require("ioredis"));
const dotenv_1 = __importDefault(require("dotenv"));
const transcribe_1 = require("./transcribe");
const clip_1 = require("./clip");
const caption_1 = require("./caption");
const export_1 = require("./export");
const cronReset_1 = require("./cronReset");
const metrics_1 = require("./metrics");
const tracing_1 = require("@xclips/config/tracing");
dotenv_1.default.config();
const connection = new ioredis_1.default(process.env.REDIS_URL || 'redis://localhost:6379');
const transcribeWorker = new bullmq_1.Worker('transcribe', transcribe_1.transcribeJob, { connection });
const clipWorker = new bullmq_1.Worker('clip', clip_1.clipJob, { connection });
const captionWorker = new bullmq_1.Worker('caption', caption_1.captionJob, { connection });
const exportWorker = new bullmq_1.Worker('export', export_1.exportJob, { connection });
const transcribeEvents = new bullmq_1.QueueEvents('transcribe', { connection });
const clipEvents = new bullmq_1.QueueEvents('clip', { connection });
const captionEvents = new bullmq_1.QueueEvents('caption', { connection });
const exportEvents = new bullmq_1.QueueEvents('export', { connection });
transcribeEvents.on('completed', ({ jobId }) => console.log(`Transcribe job ${jobId} completed`));
transcribeEvents.on('failed', ({ jobId, failedReason }) => console.error(`Transcribe job ${jobId} failed: ${failedReason}`));
clipEvents.on('completed', ({ jobId }) => console.log(`Clip job ${jobId} completed`));
clipEvents.on('failed', ({ jobId, failedReason }) => console.error(`Clip job ${jobId} failed: ${failedReason}`));
captionEvents.on('completed', ({ jobId }) => console.log(`Caption job ${jobId} done`));
captionEvents.on('failed', ({ jobId, failedReason }) => console.error(`Caption job ${jobId} failed: ${failedReason}`));
exportEvents.on('completed', ({ jobId }) => console.log(`Export job ${jobId} done`));
exportEvents.on('failed', ({ jobId, failedReason }) => console.error(`Export job ${jobId} failed: ${failedReason}`));
(0, cronReset_1.scheduleCreditReset)();
(0, metrics_1.startWorkerMetricsServer)();
(0, tracing_1.initTracing)('worker');
process.on('SIGINT', async () => {
    await transcribeWorker.close();
    await clipWorker.close();
    await captionWorker.close();
    await exportWorker.close();
    await transcribeEvents.close();
    await clipEvents.close();
    await captionEvents.close();
    await exportEvents.close();
    connection.disconnect();
    process.exit(0);
});

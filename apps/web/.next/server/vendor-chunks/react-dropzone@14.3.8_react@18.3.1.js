"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-dropzone@14.3.8_react@18.3.1";
exports.ids = ["vendor-chunks/react-dropzone@14.3.8_react@18.3.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/index.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* reexport safe */ _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCode),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useDropzone: () => (/* binding */ useDropzone)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@14.0.4_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ \"(ssr)/../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js\");\n/* harmony import */ var file_selector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! file-selector */ \"(ssr)/../../node_modules/.pnpm/file-selector@2.1.2/node_modules/file-selector/dist/es2015/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/utils/index.js\");\nvar _excluded = [\n    \"children\"\n], _excluded2 = [\n    \"open\"\n], _excluded3 = [\n    \"refKey\",\n    \"role\",\n    \"onKeyDown\",\n    \"onFocus\",\n    \"onBlur\",\n    \"onClick\",\n    \"onDragEnter\",\n    \"onDragOver\",\n    \"onDragLeave\",\n    \"onDrop\"\n], _excluded4 = [\n    \"refKey\",\n    \"onChange\",\n    \"onClick\"\n];\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n/* eslint prefer-template: 0 */ \n\n\n\n/**\n * Convenience wrapper component for the `useDropzone` hook\n *\n * ```jsx\n * <Dropzone>\n *   {({getRootProps, getInputProps}) => (\n *     <div {...getRootProps()}>\n *       <input {...getInputProps()} />\n *       <p>Drag 'n' drop some files here, or click to select files</p>\n *     </div>\n *   )}\n * </Dropzone>\n * ```\n */ var Dropzone = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_ref, ref) {\n    var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);\n    var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, function() {\n        return {\n            open: open\n        };\n    }, [\n        open\n    ]); // TODO: Figure out why react-styleguidist cannot create docs if we don't return a jsx element\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children(_objectSpread(_objectSpread({}, props), {}, {\n        open: open\n    })));\n});\nDropzone.displayName = \"Dropzone\"; // Add default props for react-docgen\nvar defaultProps = {\n    disabled: false,\n    getFilesFromEvent: file_selector__WEBPACK_IMPORTED_MODULE_1__.fromEvent,\n    maxSize: Infinity,\n    minSize: 0,\n    multiple: true,\n    maxFiles: 0,\n    preventDropOnDocument: true,\n    noClick: false,\n    noKeyboard: false,\n    noDrag: false,\n    noDragEventsBubbling: false,\n    validator: null,\n    useFsAccessApi: false,\n    autoFocus: false\n};\nDropzone.defaultProps = defaultProps;\nDropzone.propTypes = {\n    /**\n   * Render function that exposes the dropzone state and prop getter fns\n   *\n   * @param {object} params\n   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render\n   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render\n   * @param {Function} params.open Open the native file selection dialog\n   * @param {boolean} params.isFocused Dropzone area is in focus\n   * @param {boolean} params.isFileDialogActive File dialog is opened\n   * @param {boolean} params.isDragActive Active drag is in progress\n   * @param {boolean} params.isDragAccept Dragged files are accepted\n   * @param {boolean} params.isDragReject Some dragged files are rejected\n   * @param {File[]} params.acceptedFiles Accepted files\n   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected\n   */ children: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Set accepted file types.\n   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.\n   * Keep in mind that mime type determination is not reliable across platforms. CSV files,\n   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under\n   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).\n   */ accept: prop_types__WEBPACK_IMPORTED_MODULE_3__.objectOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3__.string)),\n    /**\n   * Allow drag 'n' drop (or selection from the file dialog) of multiple files\n   */ multiple: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If false, allow dropped items to take over the current browser window\n   */ preventDropOnDocument: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If true, disables click to open the native file selection dialog\n   */ noClick: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If true, disables SPACE/ENTER to open the native file selection dialog.\n   * Note that it also stops tracking the focus state.\n   */ noKeyboard: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If true, disables drag 'n' drop\n   */ noDrag: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * If true, stops drag event propagation to parents\n   */ noDragEventsBubbling: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Minimum file size (in bytes)\n   */ minSize: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * Maximum file size (in bytes)\n   */ maxSize: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * Maximum accepted number of files\n   * The default value is 0 which means there is no limitation to how many files are accepted.\n   */ maxFiles: prop_types__WEBPACK_IMPORTED_MODULE_3__.number,\n    /**\n   * Enable/disable the dropzone\n   */ disabled: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Use this to provide a custom file aggregator\n   *\n   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)\n   */ getFilesFromEvent: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when closing the file dialog with no selection\n   */ onFileDialogCancel: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when opening the file dialog\n   */ onFileDialogOpen: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\n   * to open the file picker instead of using an `<input type=\"file\">` click event.\n   */ useFsAccessApi: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Set to true to focus the root element on render\n   */ autoFocus: prop_types__WEBPACK_IMPORTED_MODULE_3__.bool,\n    /**\n   * Cb for when the `dragenter` event occurs.\n   *\n   * @param {DragEvent} event\n   */ onDragEnter: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when the `dragleave` event occurs\n   *\n   * @param {DragEvent} event\n   */ onDragLeave: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when the `dragover` event occurs\n   *\n   * @param {DragEvent} event\n   */ onDragOver: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when the `drop` event occurs.\n   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.\n   *\n   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.\n   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.\n   * If `multiple` is set to false and additional files are dropped,\n   * all files besides the first will be rejected.\n   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.\n   *\n   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.\n   *\n   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.\n   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\n   *\n   * ```js\n   * function onDrop(acceptedFiles) {\n   *   const req = request.post('/upload')\n   *   acceptedFiles.forEach(file => {\n   *     req.attach(file.name, file)\n   *   })\n   *   req.end(callback)\n   * }\n   * ```\n   *\n   * @param {File[]} acceptedFiles\n   * @param {FileRejection[]} fileRejections\n   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\n   */ onDrop: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when the `drop` event occurs.\n   * Note that if no files are accepted, this callback is not invoked.\n   *\n   * @param {File[]} files\n   * @param {(DragEvent|Event)} event\n   */ onDropAccepted: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when the `drop` event occurs.\n   * Note that if no files are rejected, this callback is not invoked.\n   *\n   * @param {FileRejection[]} fileRejections\n   * @param {(DragEvent|Event)} event\n   */ onDropRejected: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Cb for when there's some error from any of the promises.\n   *\n   * @param {Error} error\n   */ onError: prop_types__WEBPACK_IMPORTED_MODULE_3__.func,\n    /**\n   * Custom validation function. It must return null if there's no errors.\n   * @param {File} file\n   * @returns {FileError|FileError[]|null}\n   */ validator: prop_types__WEBPACK_IMPORTED_MODULE_3__.func\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dropzone);\n/**\n * A function that is invoked for the `dragenter`,\n * `dragover` and `dragleave` events.\n * It is not invoked if the items are not files (such as link, text, etc.).\n *\n * @callback dragCb\n * @param {DragEvent} event\n */ /**\n * A function that is invoked for the `drop` or input change event.\n * It is not invoked if the items are not files (such as link, text, etc.).\n *\n * @callback dropCb\n * @param {File[]} acceptedFiles List of accepted files\n * @param {FileRejection[]} fileRejections List of rejected files and why they were rejected\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\n */ /**\n * A function that is invoked for the `drop` or input change event.\n * It is not invoked if the items are files (such as link, text, etc.).\n *\n * @callback dropAcceptedCb\n * @param {File[]} files List of accepted files that meet the given criteria\n * (`accept`, `multiple`, `minSize`, `maxSize`)\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\n */ /**\n * A function that is invoked for the `drop` or input change event.\n *\n * @callback dropRejectedCb\n * @param {File[]} files List of rejected files that do not meet the given criteria\n * (`accept`, `multiple`, `minSize`, `maxSize`)\n * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)\n */ /**\n * A function that is used aggregate files,\n * in a asynchronous fashion, from drag or input change events.\n *\n * @callback getFilesFromEvent\n * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)\n * @returns {(File[]|Promise<File[]>)}\n */ /**\n * An object with the current dropzone state.\n *\n * @typedef {object} DropzoneState\n * @property {boolean} isFocused Dropzone area is in focus\n * @property {boolean} isFileDialogActive File dialog is opened\n * @property {boolean} isDragActive Active drag is in progress\n * @property {boolean} isDragAccept Dragged files are accepted\n * @property {boolean} isDragReject Some dragged files are rejected\n * @property {File[]} acceptedFiles Accepted files\n * @property {FileRejection[]} fileRejections Rejected files and why they were rejected\n */ /**\n * An object with the dropzone methods.\n *\n * @typedef {object} DropzoneMethods\n * @property {Function} getRootProps Returns the props you should apply to the root drop container you render\n * @property {Function} getInputProps Returns the props you should apply to hidden file input you render\n * @property {Function} open Open the native file selection dialog\n */ var initialState = {\n    isFocused: false,\n    isFileDialogActive: false,\n    isDragActive: false,\n    isDragAccept: false,\n    isDragReject: false,\n    acceptedFiles: [],\n    fileRejections: []\n};\n/**\n * A React hook that creates a drag 'n' drop area.\n *\n * ```jsx\n * function MyDropzone(props) {\n *   const {getRootProps, getInputProps} = useDropzone({\n *     onDrop: acceptedFiles => {\n *       // do something with the File objects, e.g. upload to some server\n *     }\n *   });\n *   return (\n *     <div {...getRootProps()}>\n *       <input {...getInputProps()} />\n *       <p>Drag and drop some files here, or click to select files</p>\n *     </div>\n *   )\n * }\n * ```\n *\n * @function useDropzone\n *\n * @param {object} props\n * @param {import(\"./utils\").AcceptProp} [props.accept] Set accepted file types.\n * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.\n * Keep in mind that mime type determination is not reliable across platforms. CSV files,\n * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under\n * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).\n * @param {boolean} [props.multiple=true] Allow drag 'n' drop (or selection from the file dialog) of multiple files\n * @param {boolean} [props.preventDropOnDocument=true] If false, allow dropped items to take over the current browser window\n * @param {boolean} [props.noClick=false] If true, disables click to open the native file selection dialog\n * @param {boolean} [props.noKeyboard=false] If true, disables SPACE/ENTER to open the native file selection dialog.\n * Note that it also stops tracking the focus state.\n * @param {boolean} [props.noDrag=false] If true, disables drag 'n' drop\n * @param {boolean} [props.noDragEventsBubbling=false] If true, stops drag event propagation to parents\n * @param {number} [props.minSize=0] Minimum file size (in bytes)\n * @param {number} [props.maxSize=Infinity] Maximum file size (in bytes)\n * @param {boolean} [props.disabled=false] Enable/disable the dropzone\n * @param {getFilesFromEvent} [props.getFilesFromEvent] Use this to provide a custom file aggregator\n * @param {Function} [props.onFileDialogCancel] Cb for when closing the file dialog with no selection\n * @param {boolean} [props.useFsAccessApi] Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API\n * to open the file picker instead of using an `<input type=\"file\">` click event.\n * @param {boolean} autoFocus Set to true to auto focus the root element.\n * @param {Function} [props.onFileDialogOpen] Cb for when opening the file dialog\n * @param {dragCb} [props.onDragEnter] Cb for when the `dragenter` event occurs.\n * @param {dragCb} [props.onDragLeave] Cb for when the `dragleave` event occurs\n * @param {dragCb} [props.onDragOver] Cb for when the `dragover` event occurs\n * @param {dropCb} [props.onDrop] Cb for when the `drop` event occurs.\n * Note that this callback is invoked after the `getFilesFromEvent` callback is done.\n *\n * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.\n * `accept` must be an object with keys as a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) and the value an array of file extensions (optional).\n * If `multiple` is set to false and additional files are dropped,\n * all files besides the first will be rejected.\n * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.\n *\n * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.\n * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.\n *\n * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.\n * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\n *\n * ```js\n * function onDrop(acceptedFiles) {\n *   const req = request.post('/upload')\n *   acceptedFiles.forEach(file => {\n *     req.attach(file.name, file)\n *   })\n *   req.end(callback)\n * }\n * ```\n * @param {dropAcceptedCb} [props.onDropAccepted]\n * @param {dropRejectedCb} [props.onDropRejected]\n * @param {(error: Error) => void} [props.onError]\n *\n * @returns {DropzoneState & DropzoneMethods}\n */ function useDropzone() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _defaultProps$props = _objectSpread(_objectSpread({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;\n    var acceptAttr = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.acceptPropAsAcceptAttr)(accept);\n    }, [\n        accept\n    ]);\n    var pickerTypes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.pickerOptionsFromAccept)(accept);\n    }, [\n        accept\n    ]);\n    var onFileDialogOpenCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return typeof onFileDialogOpen === \"function\" ? onFileDialogOpen : noop;\n    }, [\n        onFileDialogOpen\n    ]);\n    var onFileDialogCancelCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return typeof onFileDialogCancel === \"function\" ? onFileDialogCancel : noop;\n    }, [\n        onFileDialogCancel\n    ]);\n    /**\n   * @constant\n   * @type {React.MutableRefObject<HTMLElement>}\n   */ var rootRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];\n    var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;\n    var fsAccessApiWorksRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)( false && 0); // Update file dialog active state when the window is focused on\n    var onWindowFocus = function onWindowFocus() {\n        // Execute the timeout only if the file dialog is opened in the browser\n        if (!fsAccessApiWorksRef.current && isFileDialogActive) {\n            setTimeout(function() {\n                if (inputRef.current) {\n                    var files = inputRef.current.files;\n                    if (!files.length) {\n                        dispatch({\n                            type: \"closeDialog\"\n                        });\n                        onFileDialogCancelCb();\n                    }\n                }\n            }, 300);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        window.addEventListener(\"focus\", onWindowFocus, false);\n        return function() {\n            window.removeEventListener(\"focus\", onWindowFocus, false);\n        };\n    }, [\n        inputRef,\n        isFileDialogActive,\n        onFileDialogCancelCb,\n        fsAccessApiWorksRef\n    ]);\n    var dragTargetsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    var onDocumentDrop = function onDocumentDrop(event) {\n        if (rootRef.current && rootRef.current.contains(event.target)) {\n            // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n            return;\n        }\n        event.preventDefault();\n        dragTargetsRef.current = [];\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (preventDropOnDocument) {\n            document.addEventListener(\"dragover\", _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.onDocumentDragOver, false);\n            document.addEventListener(\"drop\", onDocumentDrop, false);\n        }\n        return function() {\n            if (preventDropOnDocument) {\n                document.removeEventListener(\"dragover\", _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.onDocumentDragOver);\n                document.removeEventListener(\"drop\", onDocumentDrop);\n            }\n        };\n    }, [\n        rootRef,\n        preventDropOnDocument\n    ]); // Auto focus the root when autoFocus is true\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!disabled && autoFocus && rootRef.current) {\n            rootRef.current.focus();\n        }\n        return function() {};\n    }, [\n        rootRef,\n        autoFocus,\n        disabled\n    ]);\n    var onErrCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(e) {\n        if (onError) {\n            onError(e);\n        } else {\n            // Let the user know something's gone wrong if they haven't provided the onError cb.\n            console.error(e);\n        }\n    }, [\n        onError\n    ]);\n    var onDragEnterCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done\n        event.persist();\n        stopPropagation(event);\n        dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [\n            event.target\n        ]);\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isEvtWithFiles)(event)) {\n            Promise.resolve(getFilesFromEvent(event)).then(function(files) {\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isPropagationStopped)(event) && !noDragEventsBubbling) {\n                    return;\n                }\n                var fileCount = files.length;\n                var isDragAccept = fileCount > 0 && (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.allFilesAccepted)({\n                    files: files,\n                    accept: acceptAttr,\n                    minSize: minSize,\n                    maxSize: maxSize,\n                    multiple: multiple,\n                    maxFiles: maxFiles,\n                    validator: validator\n                });\n                var isDragReject = fileCount > 0 && !isDragAccept;\n                dispatch({\n                    isDragAccept: isDragAccept,\n                    isDragReject: isDragReject,\n                    isDragActive: true,\n                    type: \"setDraggedFiles\"\n                });\n                if (onDragEnter) {\n                    onDragEnter(event);\n                }\n            }).catch(function(e) {\n                return onErrCb(e);\n            });\n        }\n    }, [\n        getFilesFromEvent,\n        onDragEnter,\n        onErrCb,\n        noDragEventsBubbling,\n        acceptAttr,\n        minSize,\n        maxSize,\n        multiple,\n        maxFiles,\n        validator\n    ]);\n    var onDragOverCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        event.preventDefault();\n        event.persist();\n        stopPropagation(event);\n        var hasFiles = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isEvtWithFiles)(event);\n        if (hasFiles && event.dataTransfer) {\n            try {\n                event.dataTransfer.dropEffect = \"copy\";\n            } catch (_unused) {}\n        /* eslint-disable-line no-empty */ }\n        if (hasFiles && onDragOver) {\n            onDragOver(event);\n        }\n        return false;\n    }, [\n        onDragOver,\n        noDragEventsBubbling\n    ]);\n    var onDragLeaveCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        event.preventDefault();\n        event.persist();\n        stopPropagation(event); // Only deactivate once the dropzone and all children have been left\n        var targets = dragTargetsRef.current.filter(function(target) {\n            return rootRef.current && rootRef.current.contains(target);\n        }); // Make sure to remove a target present multiple times only once\n        // (Firefox may fire dragenter/dragleave multiple times on the same element)\n        var targetIdx = targets.indexOf(event.target);\n        if (targetIdx !== -1) {\n            targets.splice(targetIdx, 1);\n        }\n        dragTargetsRef.current = targets;\n        if (targets.length > 0) {\n            return;\n        }\n        dispatch({\n            type: \"setDraggedFiles\",\n            isDragActive: false,\n            isDragAccept: false,\n            isDragReject: false\n        });\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isEvtWithFiles)(event) && onDragLeave) {\n            onDragLeave(event);\n        }\n    }, [\n        rootRef,\n        onDragLeave,\n        noDragEventsBubbling\n    ]);\n    var setFiles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(files, event) {\n        var acceptedFiles = [];\n        var fileRejections = [];\n        files.forEach(function(file) {\n            var _fileAccepted = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.fileAccepted)(file, acceptAttr), _fileAccepted2 = _slicedToArray(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];\n            var _fileMatchSize = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.fileMatchSize)(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];\n            var customErrors = validator ? validator(file) : null;\n            if (accepted && sizeMatch && !customErrors) {\n                acceptedFiles.push(file);\n            } else {\n                var errors = [\n                    acceptError,\n                    sizeError\n                ];\n                if (customErrors) {\n                    errors = errors.concat(customErrors);\n                }\n                fileRejections.push({\n                    file: file,\n                    errors: errors.filter(function(e) {\n                        return e;\n                    })\n                });\n            }\n        });\n        if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {\n            // Reject everything and empty accepted files\n            acceptedFiles.forEach(function(file) {\n                fileRejections.push({\n                    file: file,\n                    errors: [\n                        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.TOO_MANY_FILES_REJECTION\n                    ]\n                });\n            });\n            acceptedFiles.splice(0);\n        }\n        dispatch({\n            acceptedFiles: acceptedFiles,\n            fileRejections: fileRejections,\n            isDragReject: fileRejections.length > 0,\n            type: \"setFiles\"\n        });\n        if (onDrop) {\n            onDrop(acceptedFiles, fileRejections, event);\n        }\n        if (fileRejections.length > 0 && onDropRejected) {\n            onDropRejected(fileRejections, event);\n        }\n        if (acceptedFiles.length > 0 && onDropAccepted) {\n            onDropAccepted(acceptedFiles, event);\n        }\n    }, [\n        dispatch,\n        multiple,\n        acceptAttr,\n        minSize,\n        maxSize,\n        maxFiles,\n        onDrop,\n        onDropAccepted,\n        onDropRejected,\n        validator\n    ]);\n    var onDropCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done\n        event.persist();\n        stopPropagation(event);\n        dragTargetsRef.current = [];\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isEvtWithFiles)(event)) {\n            Promise.resolve(getFilesFromEvent(event)).then(function(files) {\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isPropagationStopped)(event) && !noDragEventsBubbling) {\n                    return;\n                }\n                setFiles(files, event);\n            }).catch(function(e) {\n                return onErrCb(e);\n            });\n        }\n        dispatch({\n            type: \"reset\"\n        });\n    }, [\n        getFilesFromEvent,\n        setFiles,\n        onErrCb,\n        noDragEventsBubbling\n    ]); // Fn for opening the file dialog programmatically\n    var openFileDialog = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        // No point to use FS access APIs if context is not secure\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\n        if (fsAccessApiWorksRef.current) {\n            dispatch({\n                type: \"openDialog\"\n            });\n            onFileDialogOpenCb(); // https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker\n            var opts = {\n                multiple: multiple,\n                types: pickerTypes\n            };\n            window.showOpenFilePicker(opts).then(function(handles) {\n                return getFilesFromEvent(handles);\n            }).then(function(files) {\n                setFiles(files, null);\n                dispatch({\n                    type: \"closeDialog\"\n                });\n            }).catch(function(e) {\n                // AbortError means the user canceled\n                if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isAbort)(e)) {\n                    onFileDialogCancelCb(e);\n                    dispatch({\n                        type: \"closeDialog\"\n                    });\n                } else if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isSecurityError)(e)) {\n                    fsAccessApiWorksRef.current = false; // CORS, so cannot use this API\n                    // Try using the input\n                    if (inputRef.current) {\n                        inputRef.current.value = null;\n                        inputRef.current.click();\n                    } else {\n                        onErrCb(new Error(\"Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided.\"));\n                    }\n                } else {\n                    onErrCb(e);\n                }\n            });\n            return;\n        }\n        if (inputRef.current) {\n            dispatch({\n                type: \"openDialog\"\n            });\n            onFileDialogOpenCb();\n            inputRef.current.value = null;\n            inputRef.current.click();\n        }\n    }, [\n        dispatch,\n        onFileDialogOpenCb,\n        onFileDialogCancelCb,\n        useFsAccessApi,\n        setFiles,\n        onErrCb,\n        pickerTypes,\n        multiple\n    ]); // Cb to open the file dialog when SPACE/ENTER occurs on the dropzone\n    var onKeyDownCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        // Ignore keyboard events bubbling up the DOM tree\n        if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {\n            return;\n        }\n        if (event.key === \" \" || event.key === \"Enter\" || event.keyCode === 32 || event.keyCode === 13) {\n            event.preventDefault();\n            openFileDialog();\n        }\n    }, [\n        rootRef,\n        openFileDialog\n    ]); // Update focus state for the dropzone\n    var onFocusCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        dispatch({\n            type: \"focus\"\n        });\n    }, []);\n    var onBlurCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        dispatch({\n            type: \"blur\"\n        });\n    }, []); // Cb to open the file dialog when click occurs on the dropzone\n    var onClickCb = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        if (noClick) {\n            return;\n        } // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()\n        // to ensure React can handle state changes\n        // See: https://github.com/react-dropzone/react-dropzone/issues/450\n        if ((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isIeOrEdge)()) {\n            setTimeout(openFileDialog, 0);\n        } else {\n            openFileDialog();\n        }\n    }, [\n        noClick,\n        openFileDialog\n    ]);\n    var composeHandler = function composeHandler(fn) {\n        return disabled ? null : fn;\n    };\n    var composeKeyboardHandler = function composeKeyboardHandler(fn) {\n        return noKeyboard ? null : composeHandler(fn);\n    };\n    var composeDragHandler = function composeDragHandler(fn) {\n        return noDrag ? null : composeHandler(fn);\n    };\n    var stopPropagation = function stopPropagation(event) {\n        if (noDragEventsBubbling) {\n            event.stopPropagation();\n        }\n    };\n    var getRootProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return function() {\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? \"ref\" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter = _ref2.onDragEnter, onDragOver = _ref2.onDragOver, onDragLeave = _ref2.onDragLeave, onDrop = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);\n            return _objectSpread(_objectSpread(_defineProperty({\n                onKeyDown: composeKeyboardHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onKeyDown, onKeyDownCb)),\n                onFocus: composeKeyboardHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onFocus, onFocusCb)),\n                onBlur: composeKeyboardHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onBlur, onBlurCb)),\n                onClick: composeHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onClick, onClickCb)),\n                onDragEnter: composeDragHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onDragEnter, onDragEnterCb)),\n                onDragOver: composeDragHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onDragOver, onDragOverCb)),\n                onDragLeave: composeDragHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onDragLeave, onDragLeaveCb)),\n                onDrop: composeDragHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onDrop, onDropCb)),\n                role: typeof role === \"string\" && role !== \"\" ? role : \"presentation\"\n            }, refKey, rootRef), !disabled && !noKeyboard ? {\n                tabIndex: 0\n            } : {}), rest);\n        };\n    }, [\n        rootRef,\n        onKeyDownCb,\n        onFocusCb,\n        onBlurCb,\n        onClickCb,\n        onDragEnterCb,\n        onDragOverCb,\n        onDragLeaveCb,\n        onDropCb,\n        noKeyboard,\n        noDrag,\n        disabled\n    ]);\n    var onInputElementClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        event.stopPropagation();\n    }, []);\n    var getInputProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return function() {\n            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? \"ref\" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);\n            var inputProps = _defineProperty({\n                accept: acceptAttr,\n                multiple: multiple,\n                type: \"file\",\n                style: {\n                    border: 0,\n                    clip: \"rect(0, 0, 0, 0)\",\n                    clipPath: \"inset(50%)\",\n                    height: \"1px\",\n                    margin: \"0 -1px -1px 0\",\n                    overflow: \"hidden\",\n                    padding: 0,\n                    position: \"absolute\",\n                    width: \"1px\",\n                    whiteSpace: \"nowrap\"\n                },\n                onChange: composeHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onChange, onDropCb)),\n                onClick: composeHandler((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.composeEventHandlers)(onClick, onInputElementClick)),\n                tabIndex: -1\n            }, refKey, inputRef);\n            return _objectSpread(_objectSpread({}, inputProps), rest);\n        };\n    }, [\n        inputRef,\n        accept,\n        multiple,\n        onDropCb,\n        disabled\n    ]);\n    return _objectSpread(_objectSpread({}, state), {}, {\n        isFocused: isFocused && !disabled,\n        getRootProps: getRootProps,\n        getInputProps: getInputProps,\n        rootRef: rootRef,\n        inputRef: inputRef,\n        open: composeHandler(openFileDialog)\n    });\n}\n/**\n * @param {DropzoneState} state\n * @param {{type: string} & DropzoneState} action\n * @returns {DropzoneState}\n */ function reducer(state, action) {\n    /* istanbul ignore next */ switch(action.type){\n        case \"focus\":\n            return _objectSpread(_objectSpread({}, state), {}, {\n                isFocused: true\n            });\n        case \"blur\":\n            return _objectSpread(_objectSpread({}, state), {}, {\n                isFocused: false\n            });\n        case \"openDialog\":\n            return _objectSpread(_objectSpread({}, initialState), {}, {\n                isFileDialogActive: true\n            });\n        case \"closeDialog\":\n            return _objectSpread(_objectSpread({}, state), {}, {\n                isFileDialogActive: false\n            });\n        case \"setDraggedFiles\":\n            return _objectSpread(_objectSpread({}, state), {}, {\n                isDragActive: action.isDragActive,\n                isDragAccept: action.isDragAccept,\n                isDragReject: action.isDragReject\n            });\n        case \"setFiles\":\n            return _objectSpread(_objectSpread({}, state), {}, {\n                acceptedFiles: action.acceptedFiles,\n                fileRejections: action.fileRejections,\n                isDragReject: action.isDragReject\n            });\n        case \"reset\":\n            return _objectSpread({}, initialState);\n        default:\n            return state;\n    }\n}\nfunction noop() {}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/utils/index.js":
/*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/utils/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FILE_INVALID_TYPE: () => (/* binding */ FILE_INVALID_TYPE),\n/* harmony export */   FILE_TOO_LARGE: () => (/* binding */ FILE_TOO_LARGE),\n/* harmony export */   FILE_TOO_SMALL: () => (/* binding */ FILE_TOO_SMALL),\n/* harmony export */   TOO_MANY_FILES: () => (/* binding */ TOO_MANY_FILES),\n/* harmony export */   TOO_MANY_FILES_REJECTION: () => (/* binding */ TOO_MANY_FILES_REJECTION),\n/* harmony export */   acceptPropAsAcceptAttr: () => (/* binding */ acceptPropAsAcceptAttr),\n/* harmony export */   allFilesAccepted: () => (/* binding */ allFilesAccepted),\n/* harmony export */   canUseFileSystemAccessAPI: () => (/* binding */ canUseFileSystemAccessAPI),\n/* harmony export */   composeEventHandlers: () => (/* binding */ composeEventHandlers),\n/* harmony export */   fileAccepted: () => (/* binding */ fileAccepted),\n/* harmony export */   fileMatchSize: () => (/* binding */ fileMatchSize),\n/* harmony export */   getInvalidTypeRejectionErr: () => (/* binding */ getInvalidTypeRejectionErr),\n/* harmony export */   getTooLargeRejectionErr: () => (/* binding */ getTooLargeRejectionErr),\n/* harmony export */   getTooSmallRejectionErr: () => (/* binding */ getTooSmallRejectionErr),\n/* harmony export */   isAbort: () => (/* binding */ isAbort),\n/* harmony export */   isEvtWithFiles: () => (/* binding */ isEvtWithFiles),\n/* harmony export */   isExt: () => (/* binding */ isExt),\n/* harmony export */   isIeOrEdge: () => (/* binding */ isIeOrEdge),\n/* harmony export */   isKindFile: () => (/* binding */ isKindFile),\n/* harmony export */   isMIMEType: () => (/* binding */ isMIMEType),\n/* harmony export */   isPropagationStopped: () => (/* binding */ isPropagationStopped),\n/* harmony export */   isSecurityError: () => (/* binding */ isSecurityError),\n/* harmony export */   onDocumentDragOver: () => (/* binding */ onDocumentDragOver),\n/* harmony export */   pickerOptionsFromAccept: () => (/* binding */ pickerOptionsFromAccept)\n/* harmony export */ });\n/* harmony import */ var attr_accept__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! attr-accept */ \"(ssr)/../../node_modules/.pnpm/attr-accept@2.2.5/node_modules/attr-accept/dist/es/index.js\");\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\nvar accepts = typeof attr_accept__WEBPACK_IMPORTED_MODULE_0__ === \"function\" ? attr_accept__WEBPACK_IMPORTED_MODULE_0__ : attr_accept__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; // Error codes\nvar FILE_INVALID_TYPE = \"file-invalid-type\";\nvar FILE_TOO_LARGE = \"file-too-large\";\nvar FILE_TOO_SMALL = \"file-too-small\";\nvar TOO_MANY_FILES = \"too-many-files\";\nvar ErrorCode = {\n    FileInvalidType: FILE_INVALID_TYPE,\n    FileTooLarge: FILE_TOO_LARGE,\n    FileTooSmall: FILE_TOO_SMALL,\n    TooManyFiles: TOO_MANY_FILES\n};\n/**\n *\n * @param {string} accept\n */ var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr() {\n    var accept = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var acceptArr = accept.split(\",\");\n    var msg = acceptArr.length > 1 ? \"one of \".concat(acceptArr.join(\", \")) : acceptArr[0];\n    return {\n        code: FILE_INVALID_TYPE,\n        message: \"File type must be \".concat(msg)\n    };\n};\nvar getTooLargeRejectionErr = function getTooLargeRejectionErr(maxSize) {\n    return {\n        code: FILE_TOO_LARGE,\n        message: \"File is larger than \".concat(maxSize, \" \").concat(maxSize === 1 ? \"byte\" : \"bytes\")\n    };\n};\nvar getTooSmallRejectionErr = function getTooSmallRejectionErr(minSize) {\n    return {\n        code: FILE_TOO_SMALL,\n        message: \"File is smaller than \".concat(minSize, \" \").concat(minSize === 1 ? \"byte\" : \"bytes\")\n    };\n};\nvar TOO_MANY_FILES_REJECTION = {\n    code: TOO_MANY_FILES,\n    message: \"Too many files\"\n};\n/**\n * Check if file is accepted.\n *\n * Firefox versions prior to 53 return a bogus MIME type for every file drag,\n * so dragovers with that MIME type will always be accepted.\n *\n * @param {File} file\n * @param {string} accept\n * @returns\n */ function fileAccepted(file, accept) {\n    var isAcceptable = file.type === \"application/x-moz-file\" || accepts(file, accept);\n    return [\n        isAcceptable,\n        isAcceptable ? null : getInvalidTypeRejectionErr(accept)\n    ];\n}\nfunction fileMatchSize(file, minSize, maxSize) {\n    if (isDefined(file.size)) {\n        if (isDefined(minSize) && isDefined(maxSize)) {\n            if (file.size > maxSize) return [\n                false,\n                getTooLargeRejectionErr(maxSize)\n            ];\n            if (file.size < minSize) return [\n                false,\n                getTooSmallRejectionErr(minSize)\n            ];\n        } else if (isDefined(minSize) && file.size < minSize) return [\n            false,\n            getTooSmallRejectionErr(minSize)\n        ];\n        else if (isDefined(maxSize) && file.size > maxSize) return [\n            false,\n            getTooLargeRejectionErr(maxSize)\n        ];\n    }\n    return [\n        true,\n        null\n    ];\n}\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\n/**\n *\n * @param {object} options\n * @param {File[]} options.files\n * @param {string} [options.accept]\n * @param {number} [options.minSize]\n * @param {number} [options.maxSize]\n * @param {boolean} [options.multiple]\n * @param {number} [options.maxFiles]\n * @param {(f: File) => FileError|FileError[]|null} [options.validator]\n * @returns\n */ function allFilesAccepted(_ref) {\n    var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;\n    if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {\n        return false;\n    }\n    return files.every(function(file) {\n        var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];\n        var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];\n        var customErrors = validator ? validator(file) : null;\n        return accepted && sizeMatch && !customErrors;\n    });\n} // React's synthetic events has event.isPropagationStopped,\n// but to remain compatibility with other libs (Preact) fall back\n// to check event.cancelBubble\nfunction isPropagationStopped(event) {\n    if (typeof event.isPropagationStopped === \"function\") {\n        return event.isPropagationStopped();\n    } else if (typeof event.cancelBubble !== \"undefined\") {\n        return event.cancelBubble;\n    }\n    return false;\n}\nfunction isEvtWithFiles(event) {\n    if (!event.dataTransfer) {\n        return !!event.target && !!event.target.files;\n    } // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file\n    return Array.prototype.some.call(event.dataTransfer.types, function(type) {\n        return type === \"Files\" || type === \"application/x-moz-file\";\n    });\n}\nfunction isKindFile(item) {\n    return _typeof(item) === \"object\" && item !== null && item.kind === \"file\";\n} // allow the entire document to be a drag target\nfunction onDocumentDragOver(event) {\n    event.preventDefault();\n}\nfunction isIe(userAgent) {\n    return userAgent.indexOf(\"MSIE\") !== -1 || userAgent.indexOf(\"Trident/\") !== -1;\n}\nfunction isEdge(userAgent) {\n    return userAgent.indexOf(\"Edge/\") !== -1;\n}\nfunction isIeOrEdge() {\n    var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;\n    return isIe(userAgent) || isEdge(userAgent);\n}\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls `event.isPropagationStopped()`.\n * Note that the check is done on the first invoke too,\n * meaning that if propagation was stopped before invoking the fns,\n * no handlers will be executed.\n *\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */ function composeEventHandlers() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function(event) {\n        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n            args[_key2 - 1] = arguments[_key2];\n        }\n        return fns.some(function(fn) {\n            if (!isPropagationStopped(event) && fn) {\n                fn.apply(void 0, [\n                    event\n                ].concat(args));\n            }\n            return isPropagationStopped(event);\n        });\n    };\n}\n/**\n * canUseFileSystemAccessAPI checks if the [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API)\n * is supported by the browser.\n * @returns {boolean}\n */ function canUseFileSystemAccessAPI() {\n    return \"showOpenFilePicker\" in window;\n}\n/**\n * Convert the `{accept}` dropzone prop to the\n * `{types}` option for https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker\n *\n * @param {AcceptProp} accept\n * @returns {{accept: string[]}[]}\n */ function pickerOptionsFromAccept(accept) {\n    if (isDefined(accept)) {\n        var acceptForPicker = Object.entries(accept).filter(function(_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];\n            var ok = true;\n            if (!isMIMEType(mimeType)) {\n                console.warn('Skipped \"'.concat(mimeType, '\" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));\n                ok = false;\n            }\n            if (!Array.isArray(ext) || !ext.every(isExt)) {\n                console.warn('Skipped \"'.concat(mimeType, '\" because an invalid file extension was provided.'));\n                ok = false;\n            }\n            return ok;\n        }).reduce(function(agg, _ref4) {\n            var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];\n            return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, mimeType, ext));\n        }, {});\n        return [\n            {\n                // description is required due to https://crbug.com/1264708\n                description: \"Files\",\n                accept: acceptForPicker\n            }\n        ];\n    }\n    return accept;\n}\n/**\n * Convert the `{accept}` dropzone prop to an array of MIME types/extensions.\n * @param {AcceptProp} accept\n * @returns {string}\n */ function acceptPropAsAcceptAttr(accept) {\n    if (isDefined(accept)) {\n        return Object.entries(accept).reduce(function(a, _ref6) {\n            var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];\n            return [].concat(_toConsumableArray(a), [\n                mimeType\n            ], _toConsumableArray(ext));\n        }, []) // Silently discard invalid entries as pickerOptionsFromAccept warns about these\n        .filter(function(v) {\n            return isMIMEType(v) || isExt(v);\n        }).join(\",\");\n    }\n    return undefined;\n}\n/**\n * Check if v is an exception caused by aborting a request (e.g window.showOpenFilePicker()).\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.\n * @param {any} v\n * @returns {boolean} True if v is an abort exception.\n */ function isAbort(v) {\n    return v instanceof DOMException && (v.name === \"AbortError\" || v.code === v.ABORT_ERR);\n}\n/**\n * Check if v is a security error.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.\n * @param {any} v\n * @returns {boolean} True if v is a security error.\n */ function isSecurityError(v) {\n    return v instanceof DOMException && (v.name === \"SecurityError\" || v.code === v.SECURITY_ERR);\n}\n/**\n * Check if v is a MIME type string.\n *\n * See accepted format: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers.\n *\n * @param {string} v\n */ function isMIMEType(v) {\n    return v === \"audio/*\" || v === \"video/*\" || v === \"image/*\" || v === \"text/*\" || v === \"application/*\" || /\\w+\\/[-+.\\w]+/g.test(v);\n}\n/**\n * Check if v is a file extension.\n * @param {string} v\n */ function isExt(v) {\n    return /^.*\\.[\\w]+$/.test(v);\n} /**\n * @typedef {Object.<string, string[]>} AcceptProp\n */  /**\n * @typedef {object} FileError\n * @property {string} message\n * @property {ErrorCode|string} code\n */  /**\n * @typedef {\"file-invalid-type\"|\"file-too-large\"|\"file-too-small\"|\"too-many-files\"} ErrorCode\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/react-dropzone@14.3.8_react@18.3.1/node_modules/react-dropzone/dist/es/utils/index.js\n");

/***/ })

};
;